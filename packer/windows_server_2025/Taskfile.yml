# Taskfile for Windows Server 2025 Packer Template
# https://taskfile.dev

version: "3"

vars:
  DEFAULT_TEMPLATE: DcDesktop
  PACKER_LOG_LEVEL: ""

env:
  PACKER_LOG: "{{.PACKER_LOG_LEVEL}}"

tasks:
  default:
    desc: "Show available tasks"
    silent: true
    cmds:
      - task --list

  validate:
    desc: "Validate Packer template configuration"
    silent: true
    cmds:
      - echo "🔍 Validating Packer configuration..."
      - packer validate .
      - echo "✅ Configuration is valid"

  init:
    desc: "Initialize Packer plugins"
    silent: true
    cmds:
      - echo "📦 Initializing Packer plugins..."
      - packer init .
      - echo "✅ Plugins initialized"

  env-check:
    desc: "Check if required environment variables are set"
    silent: true
    cmds:
      - |
        echo "🔍 Checking required environment variables..."

        # Check if .env file exists
        if [ ! -f ".env" ]; then
          echo "⚠️  .env file not found"
          echo "💡 Create one from template:"
          echo "   cp .env.template .env"
          echo "   # Then edit .env with your actual credentials"
          echo ""
        else
          echo "✅ .env file found"
        fi

        missing_vars=()

        if [ -z "$PKR_VAR_proxmox_api_token" ]; then
          missing_vars+=("PKR_VAR_proxmox_api_token")
        fi

        if [ -z "$PKR_VAR_proxmox_username" ]; then
          missing_vars+=("PKR_VAR_proxmox_username")
        fi

        if [ -z "$PKR_VAR_winrm_password" ]; then
          missing_vars+=("PKR_VAR_winrm_password")
        fi

        if [ ${#missing_vars[@]} -eq 0 ]; then
          echo "✅ All required environment variables are set"
        else
          echo "❌ Missing required environment variables:"
          printf '  %s\n' "${missing_vars[@]}"
          echo ""
          echo "💡 Options to set them:"
          echo "   1. Create/update .env file (recommended):"
          echo "      cp .env.template .env"
          echo "      # Edit .env with your credentials"
          echo ""
          echo "   2. Export manually:"
          echo "      export PKR_VAR_proxmox_api_token=\"your-token\""
          echo "      export PKR_VAR_proxmox_username=\"terraform@pve!terra\""
          echo "      export PKR_VAR_winrm_password=\"your-password\""
          exit 1
        fi

  env-check-clone:
    desc: "Check if required environment variables are set for clone build"
    silent: true
    cmds:
      - |
        echo "🔍 Checking required environment variables for clone build..."

        # Check if .env file exists
        if [ ! -f ".env" ]; then
          echo "⚠️  .env file not found"
          echo "💡 Create one from template:"
          echo "   cp .env.template .env"
          echo "   # Then edit .env with your actual credentials"
          echo ""
        else
          echo "✅ .env file found"
        fi

        missing_vars=()

        if [ -z "$PKR_VAR_proxmox_api_token" ]; then
          missing_vars+=("PKR_VAR_proxmox_api_token")
        fi

        if [ -z "$PKR_VAR_proxmox_username" ]; then
          missing_vars+=("PKR_VAR_proxmox_username")
        fi

        if [ -z "$PKR_VAR_winrm_password" ]; then
          missing_vars+=("PKR_VAR_winrm_password")
        fi

        if [ -z "$PKR_VAR_clone_vm_id" ]; then
          missing_vars+=("PKR_VAR_clone_vm_id")
        fi

        if [ ${#missing_vars[@]} -eq 0 ]; then
          echo "✅ All required environment variables are set for clone build"
        else
          echo "❌ Missing required environment variables for clone build:"
          printf '  %s\n' "${missing_vars[@]}"
          echo ""
          echo "💡 Options to set them:"
          echo "   1. Create/update .env file (recommended):"
          echo "      cp .env.template .env"
          echo "      # Edit .env with your credentials"
          echo ""
          echo "   2. Export manually:"
          echo "      export PKR_VAR_proxmox_api_token=\"your-token\""
          echo "      export PKR_VAR_proxmox_username=\"terraform@pve!terra\""
          echo "      export PKR_VAR_winrm_password=\"your-password\""
          echo "      export PKR_VAR_clone_vm_id=\"vm-id-to-clone\""
          echo ""
          echo "   3. Pass as task variable:"
          echo "      task build-clone PKR_VAR_clone_vm_id=12345"
          echo ""
          echo "ℹ️  The PKR_VAR_clone_vm_id should be the ID of an existing VM template to clone from"
          exit 1
        fi

  setup:
    desc: "Setup environment and check prerequisites"
    silent: true
    deps: [env-check]
    cmds:
      - |
        echo "🔍 Checking Packer installation..."
        if ! command -v packer &> /dev/null; then
          echo "❌ Packer is not installed. Please install Packer first."
          echo "   Visit: https://www.packer.io/downloads"
          exit 1
        fi
        echo "✅ Packer is installed: $(packer version)"

        echo ""
        echo "🚀 Environment is ready for building Windows Server 2025 templates!"

  setup-clone:
    desc: "Setup environment and check prerequisites for clone build"
    silent: true
    deps: [env-check-clone]
    cmds:
      - |
        echo "🔍 Checking Packer installation..."
        if ! command -v packer &> /dev/null; then
          echo "❌ Packer is not installed. Please install Packer first."
          echo "   Visit: https://www.packer.io/downloads"
          exit 1
        fi
        echo "✅ Packer is installed: $(packer version)"

        echo ""
        echo "🚀 Environment is ready for building Windows Server 2025 clone templates!"

  build-iso:
    desc: "Build Windows Server 2025 template - Use DEBUG=true to enable breakpoints"
    silent: true
    deps: [setup, validate]
    cmds:
      - |
        echo "🏗️  Building Windows Server 2025 template: {{.TEMPLATE | default .DEFAULT_TEMPLATE}}"

        {{if eq .DEBUG "true"}}
        echo "🐛 Debug mode enabled - build will pause at breakpoints"
        echo "💡 Use VNC to connect to the VM during breakpoints"
        {{else}}
        echo "⏰ This process typically takes 90 - 180 minutes, depending on Windows Updates..."
        {{end}}

        echo ""

        {{if eq .DEBUG "true"}}
        packer build \
          -var 'disable_debug_breakpoints=false' \
          -var 'disable_pre_sysprep_breakpoints=false' \
          -var 'template={{.TEMPLATE | default .DEFAULT_TEMPLATE}}' \
          -only="iso_build.proxmox-iso.windows2025" \
          .
        {{else}}
        packer build -var 'template={{.TEMPLATE | default .DEFAULT_TEMPLATE}}' -only="iso_build.proxmox-iso.windows2025" .
        {{end}}

        echo ""
        echo "✅ Template build completed successfully!"
        echo "📦 Template available in Proxmox as: template-win2025-{{.TEMPLATE | default .DEFAULT_TEMPLATE}}"

  build-clone:
    desc: "Build Windows Server 2025 clone template - Use DEBUG=true to enable breakpoints"
    silent: true
    deps: [setup-clone, validate]
    cmds:
      - |
        echo "🏗️  Building Windows Server 2025 clone template"

        {{if eq .DEBUG "true"}}
        echo "🐛 Debug mode enabled - build will pause at breakpoints"
        echo "💡 Use VNC to connect to the VM during breakpoints"
        {{else}}
        echo "⏰ This process typically takes 25 - 90 minutes, depending on Windows Updates..."
        {{end}}

        echo ""

        {{if eq .DEBUG "true"}}
        packer build \
          -var 'disable_debug_breakpoints=false' \
          -var 'disable_pre_sysprep_breakpoints=false' \
          -only="clone_build.proxmox-clone.windows2025" \
          .
        {{else}}
        packer build -only="clone_build.proxmox-clone.windows2025" .
        {{end}}

        echo ""
        echo "✅ Template build completed successfully!"
        echo "📦 Template available in Proxmox as: template-win2025-cloudbase-{{.TEMPLATE | default "custom"}}"

  clean:
    desc: "Clean up Packer cache and temporary files"
    silent: true
    cmds:
      - |
        echo "🧹 Cleaning up Packer cache and temporary files..."
        if [ -d "packer_cache" ]; then
          rm -rf packer_cache
          echo "✅ Removed packer_cache directory"
        fi

        if [ -f "packer.log" ]; then
          rm packer.log
          echo "✅ Removed packer.log"
        fi

        # Remove any .box files (if any)
        if ls *.box 1> /dev/null 2>&1; then
          rm *.box
          echo "✅ Removed .box files"
        fi

        echo "✅ Cleanup completed"

  inspect:
    desc: "Inspect Packer template configuration"
    silent: true
    cmds:
      - |
        echo "🔍 Packer Template Configuration:"
        echo "=================================="
        echo ""
        echo "📄 Main configuration file:"
        ls -la windows_server_2025.pkr.hcl
        echo ""
        echo "📄 Variable files:"
        ls -la variables*.pkr*
        echo ""
        echo "📂 Build files:"
        find build_files -type f | head -10
        echo ""
        echo "🏷️  Available templates:"
        echo "  - DcDesktop    (Datacenter with Desktop Experience)"
        echo "  - DcCore       (Datacenter Core)"
        echo "  - StdDesktop   (Standard with Desktop Experience)"
        echo "  - StdCore      (Standard Core)"
        echo ""
        echo "🔧 Current configuration:"
        packer inspect .

  logs:
    desc: "Show recent Packer build logs"
    silent: true
    cmds:
      - |
        if [ -f "packer.log" ]; then
          echo "📋 Last 50 lines of packer.log:"
          echo "================================"
          tail -50 packer.log
        else
          echo "❌ No packer.log found"
          echo "💡 Set PACKER_LOG=1 to enable logging"
        fi

  help:
    desc: "Show detailed help and usage examples"
    silent: true
    cmds:
      - |
        echo "🚀 Windows Server 2025 Packer Template Builder"
        echo "==============================================="
        echo ""
        echo "📋 Common Tasks:"
        echo "  task setup              # Check prerequisites and environment"
        echo "  task validate           # Validate configuration"
        echo "  task build-iso          # Build default template (DcDesktop)"
        echo "  task build-clone        # Build clone template"
        echo "  task clean              # Clean up cache and logs"
        echo ""
        echo "🏗️  Specific Template Builds:"
        echo "  task build-dcdesktop    # Datacenter with Desktop"
        echo "  task build-dccore       # Datacenter Core"
        echo "  task build-stddesktop   # Standard with Desktop"
        echo "  task build-stdcore      # Standard Core"
        echo ""
        echo "🔧 Custom Template Build:"
        echo "  task build-iso TEMPLATE=DcCore"
        echo "  task build-clone TEMPLATE=custom"
        echo ""
        echo "🔗 Clone Build Requirements:"
        echo "  task env-check-clone                # Check clone-specific environment variables"
        echo "  task build-clone PKR_VAR_clone_vm_id=12345  # Specify source VM ID for cloning"
        echo "  # Note: PKR_VAR_clone_vm_id must be set to an existing VM template ID"
        echo ""
        echo "🐛 Debug Options:"
        echo "  task build-iso DEBUG=true          # Enable breakpoints for ISO build"
        echo "  task build-clone DEBUG=true        # Enable breakpoints for clone build"
        echo "  task build-iso DEBUG=true TEMPLATE=DcDesktop   # Debug specific template"
        echo "  PACKER_LOG=1 task build-iso        # Enable verbose logging"
        echo ""
        echo "📚 More Information:"
        echo "  - See README.md for detailed documentation"
        echo "  - Check variables.auto.pkrvars.hcl for configuration options"
        echo ""
        echo "⚠️  Important:"
        echo "  - Create .env file from template: cp .env.template .env"
        echo "  - Edit .env with your actual credentials"
        echo "  - For clone builds, set PKR_VAR_clone_vm_id to an existing VM template ID"
        echo "  - Never commit .env to version control"
        echo "  - Test builds in non-production environment first"
