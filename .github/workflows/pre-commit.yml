name: Pre-commit

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    name: Pre-commit checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Remove git-crypt encrypted files
        run: |
          echo "üîê Removing git-crypt encrypted files (not unlocked in CI)..."
          find . -name "*.secrets.*" -type f -delete
          find . -name ".env" -type f -delete
          find . -name "backend.config" -type f -delete
          # Remove git-crypt encrypted files (they appear as binary data when locked)
          git ls-files | xargs file | grep -E ": data$" | cut -d: -f1 | xargs rm -f || true
          echo "‚úÖ Encrypted files removed to avoid CI processing issues"
          git status --porcelain

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install CLI tools
        uses: alexellis/arkade-get@master
        with:
          kubectl: latest
          kustomize: latest
          kubeconform: latest
          task: latest
          tflint: latest
          terraform: latest
          packer: latest

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install cspell
        run: |
          npm install -g cspell
          cspell --version

      - name: Install additional tools
        run: |
          # Install yamllint for YAML validation
          pip install yamllint

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node-${{ runner.os }}-${{ hashFiles('package*.json') }}

      - name: Run pre-commit
        uses: cloudposse/github-action-pre-commit@v4.0.0

  security-scan:
    runs-on: ubuntu-latest
    name: Security scan
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results as artifact (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results
          path: trivy-results.sarif
          retention-days: 30

      - name: Display Trivy scan summary
        if: always()
        run: |
          echo "üîç Trivy Security Scan Completed"
          echo "================================="
          if [ -f "trivy-results.sarif" ]; then
            echo "‚úÖ SARIF results generated successfully"
            echo "üìä Results available as workflow artifact"
            echo "üîó Enable Code Scanning in repository settings to view in Security tab"
          else
            echo "‚ùå SARIF results not found"
          fi
