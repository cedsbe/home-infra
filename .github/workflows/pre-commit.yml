name: Pre-commit

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    name: Pre-commit checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js (for cspell)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: latest

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x

      - name: Install kubectl and kustomize
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

          # Install kustomize
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Install kubeconform
        run: |
          wget https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz
          sudo mv kubeconform /usr/local/bin

      - name: Install tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Install tflint plugins
        run: |
          tflint --init

      - name: Install additional tools
        run: |
          # Install yamllint for YAML validation
          pip install yamllint

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node-${{ runner.os }}-${{ hashFiles('package*.json') }}

      - name: Install cspell dependencies
        run: |
          npm install
          cspell --version

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --all-files

  security-scan:
    runs-on: ubuntu-latest
    name: Security scan
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results as artifact (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results
          path: trivy-results.sarif
          retention-days: 30

      - name: Display Trivy scan summary
        if: always()
        run: |
          echo "üîç Trivy Security Scan Completed"
          echo "================================="
          if [ -f "trivy-results.sarif" ]; then
            echo "‚úÖ SARIF results generated successfully"
            echo "üìä Results available as workflow artifact"
            echo "üîó Enable Code Scanning in repository settings to view in Security tab"
          else
            echo "‚ùå SARIF results not found"
          fi
