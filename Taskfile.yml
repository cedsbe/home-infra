# https://taskfile.dev

version: "3"

vars:
  CILIUM_VERSION: v1.17.4

env:
  KUBECONFIG: terraform/kubernetes/output/kube-config.yaml
  TALOSCONFIG: terraform/kubernetes/output/talos-config.yaml

dotenv: ['packer/windows_server_2025/.env']

includes:
  packer:
    taskfile: ./packer/windows_server_2025/Taskfile.yml
    dir: ./packer/windows_server_2025

tasks:
  bootstrap_cilium_config:
    cmds:
      - |
        helm template \
          cilium \
          cilium/cilium \
          --version={{.CILIUM_VERSION}} \
          --namespace kube-system \
          --set kubeProxyReplacement=true \
          --values k8s/infra/network/cilium/values_bootstrap.yaml > terraform/kubernetes/modules/talos/talos_inline_manifests/sensitive_cilium_helm_template.yaml
    sources:
      - k8s/infra/network/cilium/values_bootstrap.yaml
    generates:
      - terraform/kubernetes/modules/talos/talos_inline_manifests/sensitive_cilium_helm_template.yaml

  ####################
  # Tools
  ####################

  all_tools_install:
    desc: "Install all tools"
    deps:
      - argocd_cli_install
      - cilium_install
      - kubeseal_install
      - kustomize_install
      - talosctl_install
      - tflint_install

  argocd_cli_install:
    desc: "Install ArgoCD CLI"
    cmds:
      - brew install argocd

  cilium_cli_install:
    desc: "Install Cilium CLI"
    cmds:
      - bash task_scripts/cilium_cli_install.sh

  cilium_hubble_install:
    desc: "Install Cilium Hubble"
    cmds:
      - bash task_scripts/cilium_hubble_install.sh

  cilium_install:
    desc: "Install Cilium and Hubble"
    deps:
      - cilium_cli_install
      - cilium_hubble_install

  k9s_install:
    desc: "Install K9s"
    cmds:
      - brew install k9s

  kubeseal_install:
    desc: "Install kubeseal"
    cmds:
      - brew install derailed/k9s/k9s

  kustomize_install:
    desc: "Install Kustomize"
    cmds:
      - brew install kustomize

  talosctl_install:
    desc: "Install talosctl"
    cmds:
      - brew install siderolabs/tap/talosctl

  tflint_install:
    desc: "Install TFLint for Terraform linting"
    cmds:
      - brew install tflint

  ####################
  # Infrastructure
  ####################

  # TODO: Add the backend configuration
  bootstrap_terraform_init:
    desc: "Initialize Terraform"
    cmds:
      - terraform init
    deps:
      - bootstrap_cilium_config
    dir: terraform/kubernetes

  bootstrap_terraform_talos:
    desc: "Bootstrap the Talos Kubernetes cluster"
    cmds:
      - terraform apply -target module.talos -auto-approve
    deps:
      - bootstrap_terraform_init
    dir: terraform/kubernetes

  bootstrap_terraform_csi:
    desc: "Bootstrap the Proxmox CSI plugin"
    cmds:
      - terraform apply -target module.csi -auto-approve
    deps:
      - bootstrap_terraform_talos
    dir: terraform/kubernetes

  cilium_test:
    desc: "Run Cilium tests"
    cmds:
      - kubectl label namespace cilium-test-1 pod-security.kubernetes.io/enforce=privileged # The test requires privileged pods
      - cilium hubble port-forward&
      - cilium connectivity test

  ####################
  # Packer Templates
  ####################
  # Packer tasks are defined in packer/windows_server_2025/Taskfile.yml
  # Use them with: task packer:TASK_NAME

  ####################
  # Code Quality
  ####################

  node_install:
    desc: "Install Node.js via Homebrew"
    cmds:
      - brew install node

  precommit_install:
    desc: "Install pre-commit hooks system"
    cmds:
      - brew install pre-commit

  terraform_docs_install:
    desc: "Install terraform-docs for generating documentation"
    cmds:
      - brew install terraform-docs

  precommit_setup:
    desc: "Install and setup pre-commit hooks (includes spell checking)"
    deps:
      - precommit_install
      - node_install
      - tflint_install
    cmds:
      - npm install -g cspell
      - pre-commit install
      - pre-commit install --hook-type commit-msg

  precommit_run:
    desc: "Run pre-commit hooks on all files"
    cmds:
      - pre-commit run --all-files

  precommit_update:
    desc: "Update pre-commit hooks to latest versions"
    cmds:
      - pre-commit autoupdate

  spell_install:
    desc: "Install Node.js and cspell for spell checking"
    cmds:
      - brew install node
      - npm install -g cspell

  spell_check:
    desc: "Run spell check on all files"
    cmds:
      - cspell --config cspell.json --gitignore .

  spell_check_fix:
    desc: "Run spell check and show suggestions for fixes"
    cmds:
      - cspell --config cspell.json --gitignore . --show-suggestions

  spell_debug:
    desc: "Debug spell check configuration"
    cmds:
      - echo "Current directory:" && pwd
      - echo "cspell.json exists:" && ls -la cspell.json
      - echo "Dictionary file exists:" && ls -la cspell-dict.txt
      - echo "Testing configuration:"
      - cspell --config cspell.json --gitignore --show-context --no-progress README.md

  spell_test_file:
    desc: "Test spell check on a specific file"
    cmds:
      - cspell --config cspell.json --gitignore --show-context "{{.FILE}}"
    requires:
      vars: [FILE]

  spell_check_local:
    desc: "Run spell check using local npm dependencies"
    cmds:
      - npm install
      - npm run spell

  spell_add_word:
    desc: "Add a word to the project dictionary"
    cmds:
      - echo "{{.WORD}}" >> cspell-dict.txt
      - sort -u cspell-dict.txt -o cspell-dict.txt
    requires:
      vars: [WORD]

  spell_extract_unknown:
    desc: "Extract all unknown words to toReview.txt for review"
    cmds:
      - cspell --config cspell.json --gitignore . --words-only --unique --no-progress > toReview.txt
