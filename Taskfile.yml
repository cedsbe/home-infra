# https://taskfile.dev

version: "3"

vars:
  CILIUM_VERSION: v1.17.4

env:
  KUBECONFIG: terraform/kubernetes/output/kube-config.yaml
  TALOSCONFIG: terraform/kubernetes/output/talos-config.yaml

dotenv:
  - "packer/windows_server_2025/.env"
  - "terraform/cloudflare/.env"

includes:
  packer:
    taskfile: ./packer/windows_server_2025/Taskfile.yml
    dir: ./packer/windows_server_2025

  azure:
    taskfile: ./terraform/azure/global/Taskfile.yml
    dir: ./terraform/azure/global

  cloudflare:
    taskfile: ./terraform/cloudflare/Taskfile.yml
    dir: ./terraform/cloudflare

  windows:
    taskfile: ./terraform/windows/Taskfile.yml
    dir: ./terraform/windows

tasks:
  ####################
  # Tools
  ####################

  all_tools_install:
    desc: "Install all tools"
    deps:
      - argocd_cli_install
      - cilium_install
      - kubeseal_install
      - kubeconform_install
      - kustomize_install
      - talosctl_install
      - tflint_install
      - az_cli_install
      - gitleaks_install
      - shfmt_install

  argocd_cli_install:
    desc: "Install ArgoCD CLI"
    cmds:
      - brew install argocd

  cilium_cli_install:
    desc: "Install Cilium CLI"
    cmds:
      - bash task_scripts/cilium_cli_install.sh

  cilium_hubble_install:
    desc: "Install Cilium Hubble"
    cmds:
      - bash task_scripts/cilium_hubble_install.sh

  cilium_install:
    desc: "Install Cilium and Hubble"
    deps:
      - cilium_cli_install
      - cilium_hubble_install

  k9s_install:
    desc: "Install K9s"
    cmds:
      - brew install k9s

  kubeseal_install:
    desc: "Install kubeseal"
    cmds:
      - brew install derailed/k9s/k9s

  kubeconform_install:
    desc: "Install kubeconform for Kubernetes manifest validation"
    cmds:
      - brew install kubeconform

  kustomize_install:
    desc: "Install Kustomize"
    cmds:
      - brew install kustomize

  talosctl_install:
    desc: "Install talosctl"
    cmds:
      - brew install siderolabs/tap/talosctl

  tflint_install:
    desc: "Install TFLint for Terraform linting"
    cmds:
      - brew install tflint

  az_cli_install:
    desc: "Install Azure CLI"
    cmds:
      - brew install azure-cli

  gitleaks_install:
    desc: "Install gitleaks for secret detection"
    cmds:
      - brew install gitleaks

  shfmt_install:
    desc: "Install shfmt for shell script formatting"
    cmds:
      - brew install shfmt

  ####################
  # Infrastructure
  ####################

  # TODO: Add the backend configuration
  bootstrap_terraform_init:
    desc: "Initialize Terraform"
    cmds:
      - terraform init
    dir: terraform/kubernetes

  bootstrap_terraform_talos:
    desc: "Bootstrap the Talos Kubernetes cluster"
    cmds:
      - terraform apply -target module.talos -auto-approve
    deps:
      - bootstrap_terraform_init
    dir: terraform/kubernetes

  bootstrap_terraform_csi:
    desc: "Bootstrap the Proxmox CSI plugin"
    cmds:
      - terraform apply -target module.csi -auto-approve
    deps:
      - bootstrap_terraform_talos
    dir: terraform/kubernetes

  cilium_test:
    desc: "Run Cilium tests"
    cmds:
      - kubectl label namespace cilium-test-1 pod-security.kubernetes.io/enforce=privileged # The test requires privileged pods
      - cilium hubble port-forward&
      - cilium connectivity test

  ####################
  # Packer Templates
  ####################
  # Packer tasks are defined in packer/windows_server_2025/Taskfile.yml
  # Use them with: task packer:TASK_NAME

  ####################
  # Code Quality
  ####################

  node_install:
    desc: "Install Node.js via Homebrew"
    cmds:
      - brew install node

  precommit_install:
    desc: "Install pre-commit hooks system"
    cmds:
      - brew install pre-commit

  terraform_docs_install:
    desc: "Install terraform-docs for generating documentation"
    cmds:
      - brew install terraform-docs

  precommit_setup:
    desc: "Install and setup pre-commit hooks (includes spell checking)"
    deps:
      - precommit_install
      - node_install
      - tflint_install
    cmds:
      - npm install -g cspell
      - pre-commit install
      - pre-commit install --hook-type commit-msg

  precommit_run:
    desc: "Run pre-commit hooks on all files"
    cmds:
      - pre-commit run --all-files

  precommit_ci_test:
    desc: "Test pre-commit in CI/CD mode (with git-crypt locked)"
    cmds:
      - |
        echo "üîí Testing pre-commit with git-crypt locked (simulating CI/CD environment)"
        if git-crypt status >/dev/null 2>&1; then
          echo "Git-crypt is unlocked, locking for test..."
          git-crypt lock
          echo "Running pre-commit..."
          pre-commit run --all-files
          echo "Unlocking git-crypt..."
          git-crypt unlock || echo "‚ö†Ô∏è  You'll need to unlock manually with: git-crypt unlock /path/to/keyfile"
        else
          echo "Git-crypt already locked, running pre-commit..."
          pre-commit run --all-files
        fi

  precommit_update:
    desc: "Update pre-commit hooks to latest versions"
    cmds:
      - pre-commit autoupdate

  ####################
  # Security / Secret Detection
  ####################

  gitleaks_scan:
    desc: "Run gitleaks to scan the git repository for secrets"
    cmds:
      - gitleaks git --config .gitleaks.toml --verbose .

  gitleaks_precommit:
    desc: "Run gitleaks pre-commit scan (not tracking staged changes)"
    cmds:
      - gitleaks git --pre-commit --config .gitleaks.toml --verbose .

  gitleaks_precommit_staged:
    desc: "Run gitleaks pre-commit scan on staged changes only"
    cmds:
      - gitleaks git --pre-commit --staged --config .gitleaks.toml --verbose .

  gitleaks_directory:
    desc: "Scan directory/files for secrets (non-git scan)"
    cmds:
      - gitleaks directory --config .gitleaks.toml --verbose .

  ####################
  # Secrets Management (Git-Crypt)
  ####################

  secrets:status:
    desc: "Show git-crypt status and file availability"
    cmds:
      - echo "=== Git-crypt Status ==="
      - git-crypt status
      - echo ""
      - echo "=== Secrets File Status ==="
      - |
        for template in $(find . -name "*.template" | grep -E "\.(env|tfvars)\.template$"); do
          target="${template%.template}"
          if [ -f "$target" ]; then
            if git-crypt status "$target" 2>/dev/null | grep -q "encrypted"; then
              echo "‚úÖ $target (encrypted, available)"
            else
              echo "‚ö†Ô∏è  $target (not encrypted - check .gitattributes)"
            fi
          else
            echo "‚ùå $target (missing - run 'task secrets:create-from-templates')"
          fi
        done

  secrets:init-new-environment:
    desc: "Initialize secrets for a completely new environment (no existing secrets)"
    cmds:
      - |
        echo "Setting up secrets for new environment..."
        for template in $(find . -name "*.template" | grep -E "\.(env|tfvars)\.template$"); do
          target="${template%.template}"
          if [ ! -f "$target" ]; then
            cp "$template" "$target"
            echo "Created $target from template"
          else
            echo "Skipping $target (already exists)"
          fi
        done
      - echo ""
      - echo "Next steps:"
      - echo "1. Edit the created files with your actual credentials"
      - echo "2. Commit the files (they'll be encrypted automatically)"
      - echo "3. Export your git-crypt key for backup - task secrets:export-key"

  secrets:verify-templates:
    desc: "Verify that templates match the structure of actual secrets"
    cmds:
      - |
        echo "Checking template completeness..."
        for template in $(find . -name "*.template" | grep -E "\.(env|tfvars)\.template$"); do
          target="${template%.template}"
          if [ -f "$target" ]; then
            echo "üìã Checking $target vs $template"
            # Extract variable names from both files
            template_vars=$(grep -E "^[A-Za-z_][A-Za-z0-9_]*\s*=" "$template" | cut -d'=' -f1 | sort || true)
            actual_vars=$(grep -E "^[A-Za-z_][A-Za-z0-9_]*\s*=" "$target" | cut -d'=' -f1 | sort || true)

            if [ "$template_vars" = "$actual_vars" ]; then
              echo "  ‚úÖ Variables match"
            else
              echo "  ‚ö†Ô∏è  Variable mismatch detected"
              echo "     Template has: $(echo $template_vars | tr '\n' ' ')"
              echo "     Actual has:   $(echo $actual_vars | tr '\n' ' ')"
            fi
          fi
        done

  secrets:create-from-templates:
    desc: "Create missing secrets files from templates (for key recovery or new setup)"
    cmds:
      - |
        missing_files=0
        for template in $(find . -name "*.template" | grep -E "\.(env|tfvars)\.template$"); do
          target="${template%.template}"
          if [ ! -f "$target" ]; then
            cp "$template" "$target"
            echo "Created $target from template - please edit with real values"
            missing_files=$((missing_files + 1))
          fi
        done

        if [ $missing_files -eq 0 ]; then
          echo "All secrets files already exist. Use 'task secrets:status' to check their status."
        else
          echo ""
          echo "Created $missing_files secrets file(s) from templates."
          echo "Please edit them with your actual credentials before committing."
        fi

  secrets:export-key:
    desc: "Export git-crypt key for backup (store securely!)"
    cmds:
      - |
        if [ ! -f .git/git-crypt/keys/default ]; then
          echo "‚ùå Git-crypt not initialized or unlocked"
          echo "Run 'git-crypt init' or 'git-crypt unlock /path/to/keyfile'"
          exit 1
        fi

        default_keyfile="$HOME/.ssh/home-infra-git-crypt-$(date +%Y%m%d).key"
        read -p "Enter backup location [$default_keyfile]: " keyfile
        keyfile=${keyfile:-$default_keyfile}

        git-crypt export-key "$keyfile"
        echo "‚úÖ Key exported to $keyfile"
        echo ""
        echo "üîí IMPORTANT SECURITY REMINDERS:"
        echo "  - Store this file in a secure location (password manager, encrypted storage)"
        echo "  - Never commit this key file to any repository"
        echo "  - Make multiple backups in different secure locations"
        echo "  - This key can decrypt ALL your secrets in this repository"

  secrets:lock:
    desc: "Lock git-crypt (remove key from working directory)"
    cmds:
      - git-crypt lock
      - echo "Repository locked. Use 'git-crypt unlock /path/to/keyfile' to unlock"

  secrets:unlock:
    desc: "Unlock git-crypt with key file"
    cmds:
      - |
        if [ -z "{{.KEYFILE}}" ]; then
          echo "Usage: task secrets:unlock KEYFILE=/path/to/keyfile"
          exit 1
        fi
        git-crypt unlock "{{.KEYFILE}}"
        echo "Repository unlocked successfully"
    requires:
      vars: [KEYFILE]

  ####################
  # Spell Checking
  ####################

  spell_install:
    desc: "Install Node.js and cspell for spell checking"
    cmds:
      - brew install node
      - npm install -g cspell

  spell_check:
    desc: "Run spell check on all files"
    cmds:
      - cspell --config cspell.json --gitignore .

  spell_check_fix:
    desc: "Run spell check and show suggestions for fixes"
    cmds:
      - cspell --config cspell.json --gitignore . --show-suggestions

  spell_debug:
    desc: "Debug spell check configuration"
    cmds:
      - echo "Current directory:" && pwd
      - echo "cspell.json exists:" && ls -la cspell.json
      - echo "Dictionary file exists:" && ls -la cspell-dict.txt
      - echo "Testing configuration:"
      - cspell --config cspell.json --gitignore --show-context --no-progress README.md

  spell_test_file:
    desc: "Test spell check on a specific file"
    cmds:
      - cspell --config cspell.json --gitignore --show-context "{{.FILE}}"
    requires:
      vars: [FILE]

  spell_check_local:
    desc: "Run spell check using local npm dependencies"
    cmds:
      - npm install
      - npm run spell

  spell_add_word:
    desc: "Add a word to the project dictionary"
    cmds:
      - echo "{{.WORD}}" >> cspell-dict.txt
      - sort -u cspell-dict.txt -o cspell-dict.txt
    requires:
      vars: [WORD]

  spell_extract_unknown:
    desc: "Extract all unknown words to toReview.txt for review"
    cmds:
      - cspell --config cspell.json --gitignore . --words-only --unique --no-progress > toReview.txt
